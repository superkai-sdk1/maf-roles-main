// =====================================================
// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
// –ß–∞—Å—Ç—å 3 –∏–∑ 5: app-sessions.js
// =====================================================

console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è app-sessions.js...');

// –†–∞—Å—à–∏—Ä—è–µ–º Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
window.app = window.app || {};
if (!window.app.methods) window.app.methods = {};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
Object.assign(window.app.methods, {
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏
    checkAndShowSessionRestore() {
        console.log('üîç checkAndShowSessionRestore: –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É');
        
        if (this.sessionRestoreChecked) {
            console.log('üîç checkAndShowSessionRestore: –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∞—Å—å');
            return;
        }
        
        this.sessionRestoreChecked = true;
        
        if (!window.sessionManager) {
            console.log('üîç checkAndShowSessionRestore: sessionManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –º—ã –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤
        if (window.sessionManager.hasTelegramCloudStorage && window.sessionManager.hasTelegramCloudStorage()) {
            console.log('üîç checkAndShowSessionRestore: –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Cloud Storage (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)');
            
            window.sessionManager.getSession((error, sessionData) => {
                if (error) {
                    console.error('üîç checkAndShowSessionRestore: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ Telegram Cloud Storage:', error);
                    return;
                }
                
                console.log('üîç checkAndShowSessionRestore: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ Telegram Cloud Storage:', sessionData);
                this.processSessionData(sessionData);
            });
        } else {
            // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è localStorage
            console.log('üîç checkAndShowSessionRestore: –ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)');
            const sessionData = window.sessionManager.getSession();
            console.log('üîç checkAndShowSessionRestore: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage:', sessionData);
            this.processSessionData(sessionData);
        }
    },
    
    processSessionData(sessionData) {
        console.log('üîç processSessionData: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏:', sessionData);
        
        if (!sessionData) {
            console.log('üîç processSessionData: –î–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
            this.showDefaultModals();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ (3 —á–∞—Å–∞)
        const isValid = window.sessionManager.isSessionValid(sessionData);
        console.log('üîç processSessionData: –°–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞:', isValid);
        
        if (!isValid) {
            // –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, —É–¥–∞–ª—è–µ–º –µ—ë
            console.log('üîç processSessionData: –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –æ—á–∏—â–∞–µ–º');
            window.sessionManager.clearSession();
            this.showDefaultModals();
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–Ω–∞—á–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        const hasSignificant = window.sessionManager.hasSignificantData(sessionData);
        console.log('üîç processSessionData: –ï—Å—Ç—å –∑–Ω–∞—á–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ:', hasSignificant);
        
        if (!hasSignificant) {
            console.log('üîç processSessionData: –ù–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥');
            this.showDefaultModals();
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        console.log('üîç processSessionData: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');
        this.previousSession = sessionData;
        this.showSessionRestoreModal = true;
    },
    
    showDefaultModals() {
        console.log('üîç showDefaultModals: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞');
        this.showRoomModal = true;
        this.showModal = false;
    },

    restoreSession() {
        if (!this.previousSession) {
            return;
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏
        this.isRestoringSession = true;
        
        const session = this.previousSession;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Ç—É—Ä–Ω–∏—Ä–∞
        if (session.roomId) {
            this.roomId = session.roomId;
            this.roomInput = session.roomId;
        }
        
        if (session.tournamentId) {
            this.tournamentId = session.tournamentId;
            this.inputMode = 'gomafia';
            this.manualMode = false;
            
            // –í–ê–ñ–ù–û: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º gameSelected –∏ tableSelected –ü–ï–†–ï–î –∑–∞–≥—Ä—É–∑–∫–æ–π —Ç—É—Ä–Ω–∏—Ä–∞
            if (session.gameSelected !== undefined) {
                this.gameSelected = session.gameSelected;
            }
            if (session.tableSelected !== undefined) {
                this.tableSelected = session.tableSelected;
            }
        } else if (session.manualMode) {
            this.inputMode = 'manual';
            this.manualMode = true;
            if (session.manualPlayers) {
                this.manualPlayers = session.manualPlayers;
            }
            if (session.manualGames) {
                this.manualGames = session.manualGames;
            }
            if (session.manualGameSelected) {
                this.manualGameSelected = session.manualGameSelected;
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
        if (session.inputMode) {
            this.inputMode = session.inputMode;
        }
        if (session.editRoles !== undefined) {
            this.editRoles = session.editRoles;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã –∏–≥—Ä–æ–∫–æ–≤
        if (session.roles) {
            this.roles = session.roles;
        }
        if (session.playersActions) {
            this.playersActions = session.playersActions;
        }
        if (session.fouls) {
            this.fouls = session.fouls;
        }
        if (session.techFouls) {
            this.techFouls = session.techFouls;
        }
        if (session.removed) {
            this.removed = session.removed;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        if (session.mainInfoText !== undefined) {
            this.mainInfoText = session.mainInfoText;
        }
        if (session.additionalInfoText !== undefined) {
            this.additionalInfoText = session.additionalInfoText;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if (session.mainInfoVisible !== undefined) {
            this.mainInfoVisible = session.mainInfoVisible;
        }
        if (session.additionalInfoVisible !== undefined) {
            this.additionalInfoVisible = session.additionalInfoVisible;
        }
        if (session.hideSeating !== undefined) {
            this.hideSeating = session.hideSeating;
        }
        if (session.hideLeaveOrder !== undefined) {
            this.hideLeaveOrder = session.hideLeaveOrder;
        }
        if (session.hideRolesStatus !== undefined) {
            this.hideRolesStatus = session.hideRolesStatus;
        }
        if (session.hideBestMove !== undefined) {
            this.hideBestMove = session.hideBestMove;
        }
        if (session.showRoomNumber !== undefined) {
            this.showRoomNumber = session.showRoomNumber;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª—É—á—à–∏–π —Ö–æ–¥
        if (session.highlightedPlayer !== undefined) {
            this.highlightedPlayer = session.highlightedPlayer;
        }
        if (session.bestMove) {
            this.bestMove = session.bestMove;
        }
        if (session.bestMoveSelected !== undefined) {
            this.bestMoveSelected = session.bestMoveSelected;
        }
        if (session.firstKilledPlayer !== undefined) {
            this.firstKilledPlayer = session.firstKilledPlayer;
        }
        if (session.showBestMoveModal !== undefined) {
            this.showBestMoveModal = session.showBestMoveModal;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–º–∏–Ω–∞—Ü–∏–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        if (session.nominations) {
            this.nominations = session.nominations;
        }
        if (session.nominationsLocked !== undefined) {
            this.nominationsLocked = session.nominationsLocked;
        }
        if (session.votingOrder) {
            this.votingOrder = session.votingOrder;
        }
        if (session.votingCurrentIndex !== undefined) {
            this.votingCurrentIndex = session.votingCurrentIndex;
        }
        if (session.votingResults) {
            this.votingResults = session.votingResults;
        }
        if (session.votingVotedPlayers) {
            this.votingVotedPlayers = session.votingVotedPlayers;
        }
        if (session.votingFinished !== undefined) {
            this.votingFinished = session.votingFinished;
        }
        if (session.votingWinners) {
            this.votingWinners = session.votingWinners;
        }
        if (session.votingStage) {
            this.votingStage = session.votingStage;
        }
        if (session.votingTiePlayers) {
            this.votingTiePlayers = session.votingTiePlayers;
        }
        if (session.votingLiftResults) {
            this.votingLiftResults = session.votingLiftResults;
        }
        if (session.votingHistory) {
            this.votingHistory = session.votingHistory;
        }
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–º—É
        if (session.selectedColorScheme) {
            this.selectedColorScheme = session.selectedColorScheme;
            if (this.applyColorScheme) {
                this.applyColorScheme(session.selectedColorScheme);
            }
        }
        if (session.selectedBackgroundTheme) {
            this.selectedBackgroundTheme = session.selectedBackgroundTheme;
            if (this.applyBackgroundTheme) {
                this.applyBackgroundTheme(session.selectedBackgroundTheme);
            }
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ —Ä–µ–∂–∏–º—ã
        if (session.winnerTeam !== undefined) {
            this.winnerTeam = session.winnerTeam;
        }
        if (session.currentMode) {
            this.currentMode = session.currentMode;
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (session.avatarsFromServer) {
            this.avatarsFromServer = session.avatarsFromServer;
        }
        if (session.avatarsJustLoaded !== undefined) {
            this.avatarsJustLoaded = session.avatarsJustLoaded;
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.showSessionRestoreModal = false;
        this.showRoomModal = false;
        this.showModal = false;
        
        console.log('üîÑ restoreSession: –°–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å tournamentId, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
        if (session.tournamentId) {
            console.log('üîÑ restoreSession: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä', session.tournamentId);
            this.loadTournament();
        } else if (session.roomId) {
            // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ (–∫–∞–∫ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞, —Ç–∞–∫ –∏ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ)
            console.log('üîÑ restoreSession: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ', session.roomId);
            this.connectWS();
        }
    },
    
    skipSessionRestore() {
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
        if (window.sessionManager) {
            window.sessionManager.clearSession();
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        this.isRestoringSession = false;
        
        // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        this.showSessionRestoreModal = false;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        this.showRoomModal = true;
        this.showModal = false;
    },
    
    sendRestoredDataToRoles(session) {
        console.log('üîÑ sendRestoredDataToRoles: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ roles.html');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {
            console.log('‚ùå sendRestoredDataToRoles: WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 500ms');
            setTimeout(() => this.sendRestoredDataToRoles(session), 500);
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏
        if (session.roles && Object.keys(session.roles).length > 0) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–ª–∏:', Object.keys(session.roles));
            Object.entries(session.roles).forEach(([roleKey, role]) => {
                this.sendToRoom({ type: "roleChange", roleKey, role });
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–≥—Ä–æ–∫–æ–≤ (actions)
        if (session.playersActions && Object.keys(session.playersActions).length > 0) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∏–≥—Ä–æ–∫–æ–≤:', Object.keys(session.playersActions));
            Object.entries(session.playersActions).forEach(([roleKey, action]) => {
                this.sendToRoom({ type: "actionChange", roleKey, action });
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ–ª—ã
        if (session.fouls && Object.keys(session.fouls).length > 0) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ–ª—ã:', Object.keys(session.fouls));
            Object.entries(session.fouls).forEach(([roleKey, value]) => {
                if (value > 0) {
                    this.sendToRoom({ type: "foulChange", roleKey, value });
                }
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Ö—Ñ–æ–ª—ã
        if (session.techFouls && Object.keys(session.techFouls).length > 0) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Ö—Ñ–æ–ª—ã:', Object.keys(session.techFouls));
            Object.entries(session.techFouls).forEach(([roleKey, value]) => {
                if (value > 0) {
                    this.sendToRoom({ type: "techFoulChange", roleKey, value });
                }
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É–¥–∞–ª–µ–Ω–∏—è
        if (session.removed && Object.keys(session.removed).length > 0) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É–¥–∞–ª–µ–Ω–∏—è:', Object.keys(session.removed));
            Object.entries(session.removed).forEach(([roleKey, value]) => {
                if (value) {
                    this.sendToRoom({ type: "removeChange", roleKey, value });
                }
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if (session.highlightedPlayer !== undefined && session.highlightedPlayer !== null) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞:', session.highlightedPlayer);
            this.sendToRoom({ type: "highlight", roleKey: session.highlightedPlayer });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ö–æ–¥
        if (session.bestMove && session.bestMove.length > 0) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª—É—á—à–∏–π —Ö–æ–¥:', session.bestMove);
            this.sendToRoom({
                type: "bestMoveChange",
                bestMove: session.bestMove,
                firstKilledPlayer: session.firstKilledPlayer
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞
        if (session.bestMoveSelected) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ —Ö–æ–¥–∞');
            this.sendToRoom({
                type: "bestMoveConfirm",
                bestMove: session.bestMove || [],
                firstKilledPlayer: session.firstKilledPlayer
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏');
        this.sendToRoom({
            type: "panelStateChange",
            panelState: {
                mainInfoText: session.mainInfoText || this.mainInfoText,
                additionalInfoText: session.additionalInfoText || this.additionalInfoText,
                mainInfoVisible: session.mainInfoVisible !== undefined ? session.mainInfoVisible : this.mainInfoVisible,
                additionalInfoVisible: session.additionalInfoVisible !== undefined ? session.additionalInfoVisible : this.additionalInfoVisible,
                hideSeating: session.hideSeating !== undefined ? session.hideSeating : this.hideSeating,
                hideLeaveOrder: session.hideLeaveOrder !== undefined ? session.hideLeaveOrder : this.hideLeaveOrder,
                hideRolesStatus: session.hideRolesStatus !== undefined ? session.hideRolesStatus : this.hideRolesStatus,
                hideBestMove: session.hideBestMove !== undefined ? session.hideBestMove : this.hideBestMove,
                showRoomNumber: session.showRoomNumber !== undefined ? session.showRoomNumber : this.showRoomNumber,
                colorScheme: session.selectedColorScheme || this.selectedColorScheme,
                backgroundTheme: session.selectedBackgroundTheme || this.selectedBackgroundTheme,
                gameSelected: session.gameSelected || this.gameSelected,
                tableSelected: session.tableSelected || this.tableSelected
            }
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        if (session.winnerTeam) {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:', session.winnerTeam);
            this.sendToRoom({ type: "winnerTeamChange", winnerTeam: session.winnerTeam });
        }
        
        // –í –∫–æ–Ω—Ü–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setTimeout(() => {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
            this.sendFullState();
            console.log('‚úÖ –í—Å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ roles.html');
        }, 300);
    },
    
    saveCurrentSession() {
        if (!window.sessionManager || !this.roomId) {
            return;
        }
        
        const sessionData = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Ç—É—Ä–Ω–∏—Ä–∞
            roomId: this.roomId,
            tournamentId: this.tournamentId,
            gameSelected: this.gameSelected,
            tableSelected: this.tableSelected,
            
            // –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
            manualMode: this.manualMode,
            manualPlayers: this.manualPlayers,
            manualGames: this.manualGames,
            manualGameSelected: this.manualGameSelected,
            inputMode: this.inputMode,
            editRoles: this.editRoles,
            
            // –†–æ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã –∏–≥—Ä–æ–∫–æ–≤
            roles: this.roles,
            playersActions: this.playersActions,
            fouls: this.fouls,
            techFouls: this.techFouls,
            removed: this.removed,
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
            mainInfoText: this.mainInfoText,
            additionalInfoText: this.additionalInfoText,
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            mainInfoVisible: this.mainInfoVisible,
            additionalInfoVisible: this.additionalInfoVisible,
            hideSeating: this.hideSeating,
            hideLeaveOrder: this.hideLeaveOrder,
            hideRolesStatus: this.hideRolesStatus,
            hideBestMove: this.hideBestMove,
            showRoomNumber: this.showRoomNumber,
            
            // –õ—É—á—à–∏–π —Ö–æ–¥
            highlightedPlayer: this.highlightedPlayer,
            bestMove: this.bestMove,
            bestMoveSelected: this.bestMoveSelected,
            firstKilledPlayer: this.firstKilledPlayer,
            showBestMoveModal: this.showBestMoveModal,
            
            // –ù–æ–º–∏–Ω–∞—Ü–∏–∏ –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            nominations: this.nominations,
            nominationsLocked: this.nominationsLocked,
            votingOrder: this.votingOrder,
            votingCurrentIndex: this.votingCurrentIndex,
            votingResults: this.votingResults,
            votingVotedPlayers: this.votingVotedPlayers,
            votingFinished: this.votingFinished,
            votingWinners: this.votingWinners,
            votingStage: this.votingStage,
            votingTiePlayers: this.votingTiePlayers,
            votingLiftResults: this.votingLiftResults,
            votingHistory: this.votingHistory,
            
            // –¢–µ–º—ã –∏ –≤–∏–∑—É–∞–ª
            selectedColorScheme: this.selectedColorScheme,
            selectedBackgroundTheme: this.selectedBackgroundTheme,
            
            // –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏ —Ä–µ–∂–∏–º—ã
            winnerTeam: this.winnerTeam,
            currentMode: this.currentMode,
            
            // –ê–≤–∞—Ç–∞—Ä—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            avatarsFromServer: this.avatarsFromServer,
            avatarsJustLoaded: this.avatarsJustLoaded
        };
        
        // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        try {
            if (window.sessionManager) {
                window.sessionManager.saveSession(sessionData);
            } else {
                console.warn('Session manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage –Ω–∞–ø—Ä—è–º—É—é');
                localStorage.setItem('maf-session', JSON.stringify({
                    ...sessionData,
                    timestamp: Date.now()
                }));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
        }
    },
    
    formatSessionTime(timestamp) {
        const date = new Date(timestamp);
        const now = new Date();
        const diffMinutes = Math.floor((now - date) / (1000 * 60));
        
        if (diffMinutes < 1) {
            return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        } else if (diffMinutes < 60) {
            return `${diffMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        } else {
            const diffHours = Math.floor(diffMinutes / 60);
            const remainingMinutes = diffMinutes % 60;
            if (remainingMinutes === 0) {
                return `${diffHours} —á –Ω–∞–∑–∞–¥`;
            } else {
                return `${diffHours} —á ${remainingMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
            }
        }
    }
});

console.log('‚úÖ app-sessions.js –∑–∞–≥—Ä—É–∂–µ–Ω, –º–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ window.app.methods');
