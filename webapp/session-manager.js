/**
 * Session Manager –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –º–∞—Ñ–∏–∏
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç localStorage –∏ Telegram Cloud Storage
 */
window.sessionManager = (function() {
    const SESSION_KEY = 'maf-session';
    const SESSION_DURATION = 3 * 60 * 60 * 1000; // 3 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram Cloud Storage
    function hasTelegramCloudStorage() {
        try {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ Telegram –æ–∫—Ä—É–∂–µ–Ω–∏–∏
            if (!window.Telegram || !window.Telegram.WebApp) {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É CloudStorage
            const webApp = window.Telegram.WebApp;
            if (!webApp.CloudStorage || typeof webApp.CloudStorage.setItem !== 'function') {
                return false;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä—Å–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç CloudStorage
            if (webApp.version && parseFloat(webApp.version) < 6.1) {
                return false;
            }
            
            return true;
        } catch (error) {
            console.warn('Telegram Cloud Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            return false;
        }
    }
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    function saveSession(sessionData) {
        const sessionWithTimestamp = {
            ...sessionData,
            timestamp: Date.now()
        };
        
        const dataString = JSON.stringify(sessionWithTimestamp);
          try {
            // –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Telegram Cloud Storage —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (hasTelegramCloudStorage()) {
                window.Telegram.WebApp.CloudStorage.setItem(SESSION_KEY, dataString, function(error) {
                    if (error) {
                        console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Telegram Cloud Storage:', error);
                        // Fallback –Ω–∞ localStorage
                        try {
                            localStorage.setItem(SESSION_KEY, dataString);
                            console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage (fallback)');
                        } catch (localError) {
                            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', localError);
                        }
                    } else {
                        console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Telegram Cloud Storage');
                    }
                });
            } else {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage
                localStorage.setItem(SESSION_KEY, dataString);
                console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
            // –§–∏–Ω–∞–ª—å–Ω—ã–π fallback –Ω–∞ localStorage
            try {
                localStorage.setItem(SESSION_KEY, dataString);
                console.log('‚úÖ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ localStorage (emergency fallback)');
            } catch (localError) {
                console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é –Ω–∏–≥–¥–µ:', localError);
            }
        }
    }
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏
    function getSession(callback) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω callback, —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è Telegram Cloud Storage
        if (callback && typeof callback === 'function') {
            if (hasTelegramCloudStorage()) {
                window.Telegram.WebApp.CloudStorage.getItem(SESSION_KEY, function(error, data) {
                    if (error || !data) {                        // Fallback –Ω–∞ localStorage
                        const localData = localStorage.getItem(SESSION_KEY);
                        if (localData) {
                            try {
                                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
                                if (localData.startsWith('<?') || localData.includes('<html>') || localData.includes('Fatal error')) {
                                    console.warn('localStorage —Å–æ–¥–µ—Ä–∂–∏—Ç HTML/PHP –≤–º–µ—Å—Ç–æ JSON:', localData.substring(0, 100));
                                    localStorage.removeItem(SESSION_KEY); // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                    callback(null, null);
                                    return;
                                }
                                
                                const parsed = JSON.parse(localData);
                                callback(null, parsed);
                            } catch (e) {
                                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ localStorage:', e, '–î–∞–Ω–Ω—ã–µ:', localData?.substring(0, 100));
                                // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                try {
                                    localStorage.removeItem(SESSION_KEY);
                                    console.log('üóëÔ∏è –û—á–∏—â–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
                                } catch (clearError) {
                                    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', clearError);
                                }
                                callback(e, null);
                            }
                        } else {
                            callback(null, null);
                        }                    } else {
                        try {
                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                            if (!data || typeof data !== 'string') {
                                console.warn('Telegram Cloud Storage –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', typeof data, data);
                                callback(new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Cloud Storage'), null);
                                return;
                            }
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ HTML/PHP –æ—à–∏–±–∫–∞
                            if (data.startsWith('<?') || data.includes('<html>') || data.includes('Fatal error')) {
                                console.warn('Telegram Cloud Storage –≤–µ—Ä–Ω—É–ª HTML/PHP –≤–º–µ—Å—Ç–æ JSON:', data.substring(0, 100));
                                callback(new Error('Cloud Storage –≤–µ—Ä–Ω—É–ª HTML –≤–º–µ—Å—Ç–æ JSON'), null);
                                return;
                            }
                            
                            const parsed = JSON.parse(data);
                            callback(null, parsed);
                        } catch (e) {
                            console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ Telegram Cloud Storage:', e, '–î–∞–Ω–Ω—ã–µ:', data?.substring(0, 100));
                            callback(e, null);
                        }
                    }
                });
                return;
            }
        }
          // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è localStorage
        try {
            const data = localStorage.getItem(SESSION_KEY);
            if (data) {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                if (data.startsWith('<?') || data.includes('<html>') || data.includes('Fatal error')) {
                    console.warn('localStorage —Å–æ–¥–µ—Ä–∂–∏—Ç HTML/PHP –≤–º–µ—Å—Ç–æ JSON:', data.substring(0, 100));
                    localStorage.removeItem(SESSION_KEY); // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    return null;
                }
                
                return JSON.parse(data);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏ –∏–∑ localStorage:', error);
            // –ü—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try {
                localStorage.removeItem(SESSION_KEY);
                console.log('üóëÔ∏è –û—á–∏—â–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage');
            } catch (clearError) {
                console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ localStorage:', clearError);
            }
        }
        return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏
    function isSessionValid(sessionData) {
        if (!sessionData || !sessionData.timestamp) {
            return false;
        }
        
        const now = Date.now();
        const sessionAge = now - sessionData.timestamp;
        
        return sessionAge < SESSION_DURATION;
    }
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–Ω–∞—á–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏
    function hasSignificantData(sessionData) {
        if (!sessionData) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const hasRoomId = sessionData.roomId && sessionData.roomId.trim();
        const hasTournamentId = sessionData.tournamentId && sessionData.tournamentId.trim();
        const hasManualMode = sessionData.manualMode;
        const hasRoles = sessionData.roles && Object.keys(sessionData.roles).length > 0;
        const hasActions = sessionData.playersActions && Object.keys(sessionData.playersActions).length > 0;
        const hasFouls = sessionData.fouls && Object.keys(sessionData.fouls).length > 0;
        const hasTechFouls = sessionData.techFouls && Object.keys(sessionData.techFouls).length > 0;
        const hasRemoved = sessionData.removed && Object.keys(sessionData.removed).length > 0;
        const hasBestMove = sessionData.bestMove && sessionData.bestMove.length > 0;
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('üîç hasSignificantData –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
            hasRoomId, hasTournamentId, hasManualMode, hasRoles, hasActions, 
            hasFouls, hasTechFouls, hasRemoved, hasBestMove
        });
        
        // –°–µ—Å—Å–∏—è –∑–Ω–∞—á–∏–º–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–Ω–∞—Ç–∞ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑ –≤–∞–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        return hasRoomId && (hasTournamentId || hasManualMode || hasRoles || hasActions || hasFouls || hasTechFouls || hasRemoved || hasBestMove);
    }
      // –û—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–∏
    function clearSession() {
        try {
            // –û—á–∏—â–∞–µ–º –∏–∑ Telegram Cloud Storage —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
            if (hasTelegramCloudStorage()) {
                window.Telegram.WebApp.CloudStorage.removeItem(SESSION_KEY, function(error) {
                    if (error) {
                        console.warn('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Telegram Cloud Storage:', error);
                    } else {
                        console.log('üóëÔ∏è –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Telegram Cloud Storage');
                    }
                });
            }
            
            // –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º localStorage
            localStorage.removeItem(SESSION_KEY);
            console.log('üóëÔ∏è –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ localStorage');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
            // –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Ö–æ—Ç—è –±—ã localStorage
            try {
                localStorage.removeItem(SESSION_KEY);
                console.log('üóëÔ∏è –°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞ –∏–∑ localStorage (fallback)');
            } catch (localError) {
                console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é:', localError);
            }
        }
    }
      // –ü—É–±–ª–∏—á–Ω—ã–π API
    return {
        saveSession: saveSession,
        getSession: getSession,
        isSessionValid: isSessionValid,
        hasSignificantData: hasSignificantData,
        clearSession: clearSession,
        hasTelegramCloudStorage: hasTelegramCloudStorage
    };
})();

console.log('‚úÖ Session Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
