// =====================================================
// –ú–æ–¥—É–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GoMafia API
// –ß–∞—Å—Ç—å 1 –∏–∑ 5: app-connector.js
// =====================================================

console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è app-connector.js...');

const waitPromise = (milliseconds) => new Promise(resolve => setTimeout(resolve, milliseconds));

class GoMafiaConnector {
    apiUrl = 'https://minahor.ru/api/';
    apiSuffix = '?za';

    async getTournament(tournamentID) {
        console.log('üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—É—Ä–Ω–∏—Ä —Å ID:', tournamentID);
        
        const fd = new FormData();
        fd.set('url', `https://gomafia.pro/tournament/${tournamentID}`);
        
        try {
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
            const response = await fetch(`${this.apiUrl}get.php${this.apiSuffix}`, { method: 'POST', body: fd });
            
            console.log('üì® –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const text = await response.text();
            console.log('üìÑ –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞:', text.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ HTML, –∞ –Ω–µ –æ—à–∏–±–∫—É PHP
            if (text.startsWith('<?') || text.includes('Fatal error') || text.includes('Parse error')) {
                console.error('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É PHP:', text.substring(0, 200));
                throw new Error('–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É PHP');
            }
            
            const match = text.match(/<script id="__NEXT_DATA__" type="application\/json">(.*)<\/script>/);
            
            if (!match || !match[1]) {
                console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω __NEXT_DATA__ –≤ –æ—Ç–≤–µ—Ç–µ');
                console.log('–ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞:', text.substring(0, 500));
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
            }            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞, –ø–∞—Ä—Å–∏–º JSON...');
            const tournamentData = JSON.parse(match[1]);
            console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω');
            console.log('üîç –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ tournamentData:', tournamentData);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º buildId –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            if (tournamentData.buildId) {
                console.log('‚úÖ buildId –Ω–∞–π–¥–µ–Ω:', tournamentData.buildId);
            } else {
                console.warn('‚ö†Ô∏è buildId –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞');
                console.log('üîç –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è tournamentData:', Object.keys(tournamentData));
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ buildId –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
                if (tournamentData.props?.buildId) {
                    console.log('‚úÖ buildId –Ω–∞–π–¥–µ–Ω –≤ props:', tournamentData.props.buildId);
                } else if (tournamentData.query?.buildId) {
                    console.log('‚úÖ buildId –Ω–∞–π–¥–µ–Ω –≤ query:', tournamentData.query.buildId);
                } else {
                    console.log('‚ùå buildId –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏–≥–¥–µ –≤ –¥–∞–Ω–Ω—ã—Ö');
                }
            }
            
            return tournamentData;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞:', error);
            return undefined;
        }
    }    async playersGet(logins) {
        const fd = new FormData();
        logins.forEach(playerLogin => fd.append('playerLogin[]', playerLogin));
        
        try {
            const response = await fetch('https://minahor.ru/api/players-get.php?za', { method: 'POST', body: fd });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            if (!response.ok) {
                console.warn('‚ö†Ô∏è playersGet: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É:', response.status, response.statusText);
                return null;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º content-type
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                console.warn('‚ö†Ô∏è playersGet: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON:', contentType);
                const text = await response.text();
                if (text.startsWith('<?') || text.includes('<html>')) {
                    console.warn('‚ö†Ô∏è playersGet: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª PHP/HTML –∫–æ–¥ –≤–º–µ—Å—Ç–æ JSON');
                    console.warn('‚ö†Ô∏è –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞:', text.substring(0, 200));
                    return null;
                }
            }
            
            const data = await response.json();
            return data;
        } catch (error) {
            console.error('‚ùå playersGet: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤:', error.message);
            return null;
        }
    }    async getUserData(buildId, userId) {
        console.log('üîÑ getUserData: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, '—Å buildId:', buildId);
        const fd = new FormData();
        fd.set('url', `https://gomafia.pro/_next/data/${buildId}/stats/${userId}.json`);
        
        const requestUrl = `https://gomafia.pro/_next/data/${buildId}/stats/${userId}.json`;
        console.log('üì° getUserData: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º:', requestUrl);
        
        try {
            const response = await fetch(`${this.apiUrl}get.php${this.apiSuffix}`, { method: 'POST', body: fd });
            console.log('üì® getUserData: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('‚úÖ getUserData: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, ':', data);
            
            const serverData = data?.pageProps?.serverData;
            console.log('üë§ getUserData: serverData –¥–ª—è', userId, ':', serverData);
            
            return serverData;
        } catch (error) {
            console.error('‚ùå getUserData: –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId, ':', error);
            return null;
        }
    }    async getUsersData(buildId, usersIdArray) {
        console.log('üîÑ getUsersData: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', usersIdArray);
        console.log('üîç getUsersData: buildId:', buildId);
        
        const uIds = [...(usersIdArray || [])];
        const result = [];
        
        for (let userId = uIds.shift(); userId; userId = uIds.shift()) {
            console.log(`‚è≥ getUsersData: –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} (–æ—Å—Ç–∞–ª–æ—Å—å: ${uIds.length})`);
            const r = await this.getUserData(buildId, userId);
            result.push(r);
            await waitPromise(50);
        }
        
        console.log('‚úÖ getUsersData: –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);
        console.log('üìä getUsersData: –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', result.filter(r => r !== null).length, '–∏–∑', usersIdArray.length);
        
        return result;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞
const goMafia = new GoMafiaConnector();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.goMafia = goMafia;

console.log('‚úÖ app-connector.js –∑–∞–≥—Ä—É–∂–µ–Ω, goMafia –¥–æ—Å—Ç—É–ø–µ–Ω –≤ window.goMafia');
