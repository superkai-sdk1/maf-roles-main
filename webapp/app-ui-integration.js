// =====================================================
// UI, WebSocket, Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ –º–µ—Ç–æ–¥—ã
// –ß–∞—Å—Ç—å 5 –∏–∑ 5: app-ui-integration.js
// =====================================================

console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è app-ui-integration.js...');

// –†–∞—Å—à–∏—Ä—è–µ–º Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞–º–∏ –¥–ª—è UI –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
window.app = window.app || {};
if (!window.app.methods) window.app.methods = {};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
Object.assign(window.app.methods, {
    // Telegram Web App –º–µ—Ç–æ–¥—ã
    initTelegramApp() {
        try {
            if (window.Telegram && window.Telegram.WebApp) {
                this.tg = window.Telegram.WebApp;
                this.isTelegramApp = true;
                this.telegramUser = this.tg.initDataUnsafe?.user;
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram –æ—Ç–∫–ª—é—á–µ–Ω–æ
                // this.applyTelegramTheme();
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
                this.setupTelegramMainButton();
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
                this.setupTelegramBackButton();
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã Telegram –æ—Ç–∫–ª—é—á–µ–Ω–æ
                // this.tg.onEvent('themeChanged', () => {
                //     this.applyTelegramTheme();
                // });
                
                this.tg.onEvent('viewportChanged', () => {
                    console.log('Viewport –∏–∑–º–µ–Ω–µ–Ω –≤ Telegram');
                });
                
                console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', this.telegramUser);
            } else {
                console.log('Telegram Web App –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ –æ–±—ã—á–Ω–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App:', error);
            this.isTelegramApp = false;
            this.tg = null;
        }
    },

    applyTelegramTheme() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram –æ—Ç–∫–ª—é—á–µ–Ω–æ
        // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–º–∞, –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ø–∞–Ω–µ–ª–∏
        return;
    },

    setupTelegramMainButton() {
        if (!this.tg) return;
        
        this.tg.MainButton.setText('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        this.tg.MainButton.onClick(() => {
            this.sendFullState();
            this.tg.HapticFeedback.impactOccurred('medium');
        });
    },

    setupTelegramBackButton() {
        if (!this.tg) return;
          this.tg.BackButton.onClick(() => {
            if (this.showBestMoveModal || this.showSettingsModal || this.showThemeModal) {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
                this.showBestMoveModal = false;
                this.showSettingsModal = false;
                this.showThemeModal = false;
                this.sendTelegramHapticFeedback('light');
            } else if (this.showModal && !this.showRoomModal) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–Ω–∞—Ç—ã
                this.showModal = false;
                this.showRoomModal = true;
                this.sendTelegramHapticFeedback('light');
            } else if (this.roomId && !this.showRoomModal) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
                this.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É?', (confirmed) => {
                    if (confirmed) {
                        this.showRoomModal = true;
                        this.roomId = null;
                        if (this.ws) {
                            this.ws.close();
                        }
                        this.tg.BackButton.hide();
                        this.hideTelegramMainButton();
                        this.sendTelegramHapticFeedback('medium');
                    }
                });
            } else {
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                this.tg.close();
            }
        });
    },

    showTelegramMainButton() {
        if (this.tg) {
            this.tg.MainButton.show();
        }
    },

    hideTelegramMainButton() {
        if (this.tg) {
            this.tg.MainButton.hide();
        }
    },

    sendTelegramHapticFeedback(type = 'medium') {
        if (this.tg) {
            this.tg.HapticFeedback.impactOccurred(type);
        }
    },

    showAlert(message) {
        if (this.isTelegramApp && this.tg) {
            this.tg.showAlert(message);
        } else {
            alert(message);
        }
    },

    showConfirm(message, callback) {
        if (this.isTelegramApp && this.tg) {
            this.tg.showConfirm(message, callback);
        } else {
            const result = confirm(message);
            callback(result);
        }
    },

    // WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    async connectWS() {
        if (this.ws) {
            this.ws.close();
        }
        this.ws = new WebSocket('wss://minahor.ru/bridge');
        this.waitingForState = true;
        this.stateReceived = false;
        
        if (this.pingInterval) clearInterval(this.pingInterval);
        this.pingInterval = setInterval(() => {
            if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                this.ws.send(JSON.stringify({ type: "ping" }));
            }
        }, 30000);

        this.ws.onopen = () => {
            this.ws.send(JSON.stringify({ joinRoom: this.roomId }));
            setTimeout(() => {
                this.sendFullState();
                
                // –ï—Å–ª–∏ –º—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                if (this.isRestoringSession && this.previousSession) {
                    console.log('üîÑ WebSocket onopen: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏');
                    setTimeout(() => {
                        this.sendRestoredDataToRoles(this.previousSession);
                    }, 500);
                }
            }, 200);
        };

        this.ws.onmessage = (ev) => {
            let data;
            try { data = JSON.parse(ev.data); } catch { data = {}; }

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü–∞–Ω–µ–ª—å –ù–ï –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç WebSocket
            // –¢–æ–ª—å–∫–æ —Å–∞–º–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä–æ–∫–æ–≤
            if (data.type === "actionChange" || data.type === "roleChange") {
                console.log(`üö´ WebSocket: –ò–ì–ù–û–†–ò–†–£–ï–ú ${data.type} –æ—Ç –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —ç—Ç–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º)`);
                console.log(`üì® –ü—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`, data);
                return;
            }

            if (data.joinedRoom && data.panelId) {
                this.panelId = data.panelId;
            }
            if (data.type === "activePanelChanged") {
                this.activePanelId = data.activePanelId;
                this.isActivePanel = (this.panelId && this.panelId === this.activePanelId);
            }
            if (data.type === "notActivePanel" && data.activePanelId) {
                this.activePanelId = data.activePanelId;
                this.isActivePanel = (this.panelId && this.panelId === this.activePanelId);
            }
            if (data.type === "state") {
                if (!Array.isArray(data.tableOut) || data.tableOut.length === 0) {
                    this.resetAllState();
                    this.stateReceived = false;
                    this.waitingForState = false;
                    this.showModal = true;
                    this.showRoomModal = false;
                } else {
                    this.applyFullState(data);
                    this.stateReceived = true;
                    this.waitingForState = false;
                    this.showModal = false;
                    this.showRoomModal = false;
                    if (data.avatars && typeof data.avatars === 'object') {
                        this.avatarsFromServer = data.avatars;
                    }

                    if (!this.avatarsFromServer || Object.keys(this.avatarsFromServer).length === 0) {
                        this.playersLoadOnline();
                    }
                    
                    // –ï—Å–ª–∏ –º—ã –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    if (this.isRestoringSession && this.previousSession) {
                        console.log('üîÑ connectWS: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ roles.html');
                        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket
                        setTimeout(() => {
                            this.sendRestoredDataToRoles(this.previousSession);
                            this.isRestoringSession = false;
                            console.log('‚úÖ connectWS: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Ñ–ª–∞–≥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω');
                        }, 1000);
                    }
                }
            }
        };

        this.ws.onclose = () => {
            if (this.pingInterval) clearInterval(this.pingInterval);
            setTimeout(() => {
                this.connectWS();
            }, 2000);
        };

        this.ws.onerror = () => {
            this.ws.close();
        };
    },    // –†–∞–±–æ—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–∞–º–∏
    async loadAvatarsFromServer() {
        if (!this.roomId) return;
        try {
            const res = await fetch(`/api/avatars-get.php?za=1&roomId=${this.roomId}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ JSON, –∞ –Ω–µ HTML
            const contentType = res.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                console.warn('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ JSON –æ—Ç–≤–µ—Ç –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤:', contentType);
                return;
            }
            
            const avatars = await res.json();
            if (avatars && typeof avatars === 'object' && Object.keys(avatars).length > 0) {
                this.avatarsFromServer = avatars;
                this.$forceUpdate();
            }
        } catch (e) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä—ã:', e.message);
            // Fallback: avatars –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        }
    },

    async saveAvatarsToServer(avatarsOverride = null) {
        if (!this.roomId) return;
        let avatars = avatarsOverride;
        if (!avatars) {
            avatars = {};
            if (this.manualMode) {
                this.manualPlayers.forEach(p => {
                    if (p.login && p.avatar_link) avatars[p.login] = p.avatar_link;
                });
            } else if (this.tableOut) {
                this.tableOut.forEach(p => {
                    if (p.login && p.avatar_link) avatars[p.login] = p.avatar_link;
                });
            }        }
        if (Object.keys(avatars).length) {
            try {
                const response = await fetch('/api/avatars-save.php', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                    body: `za=1&roomId=${encodeURIComponent(this.roomId)}&avatars=${encodeURIComponent(JSON.stringify(avatars))}`
                });
                
                if (!response.ok) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–≤:', response.status, response.statusText);
                } else {
                    console.log('‚úÖ Avatars sent to server:', avatars);
                }
            } catch (e) {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä—ã:', e.message);
            }
        }
    },    // –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã
    async saveRoomStateIncremental(data) {
        if (!this.roomId) return;
        try {
            const response = await fetch('/api/room-state.php?roomId=' + encodeURIComponent(this.roomId), {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });
            
            if (!response.ok) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', response.status, response.statusText);
            }
        } catch (e) { 
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', e.message); 
        }
    },

    async saveRoomStateAll() {
        if (!this.roomId) return;
        const state = {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º playersActions –≤ –ø–æ–ª–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            // playersActions —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            roles: this.roles,
            fouls: this.fouls,
            techFouls: this.techFouls,
            removed: this.removed,
            mainInfoText: this.mainInfoText,
            additionalInfoText: this.additionalInfoText,
            mainInfoVisible: this.mainInfoVisible,
            additionalInfoVisible: this.additionalInfoVisible,
            hideSeating: this.hideSeating,
            hideLeaveOrder: this.hideLeaveOrder,
            hideRolesStatus: this.hideRolesStatus,
            hideBestMove: this.hideBestMove,
            highlightedPlayer: this.highlightedPlayer,
            bestMove: this.bestMove,
            bestMoveSelected: this.bestMoveSelected,
            firstKilledPlayer: this.firstKilledPlayer,
            nominations: this.nominations,
            nominationsLocked: this.nominationsLocked,
            votingOrder: this.votingOrder,
            votingCurrentIndex: this.votingCurrentIndex,
            votingResults: this.votingResults,
            votingVotedPlayers: this.votingVotedPlayers,
            votingFinished: this.votingFinished,
            votingWinners: this.votingWinners,
            votingStage: this.votingStage,
            votingTiePlayers: this.votingTiePlayers,
            votingLiftResults: this.votingLiftResults,
            votingHistory: this.votingHistory,
            selectedColorScheme: this.selectedColorScheme,
            selectedBackgroundTheme: this.selectedBackgroundTheme,
            winnerTeam: this.winnerTeam,
            currentMode: this.currentMode,
            manualMode: this.manualMode,
            manualGames: this.manualGames,
            manualGameSelected: this.manualGameSelected,
            gameSelected: this.gameSelected,
            tableSelected: this.tableSelected,
            editRoles: this.editRoles,
            inputMode: this.inputMode,
            avatarsFromServer: this.avatarsFromServer,
            avatarsJustLoaded: this.avatarsJustLoaded,        };
        try {
            const response = await fetch('/api/room-state.php?roomId=' + encodeURIComponent(this.roomId), {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(state)
            });
            
            if (!response.ok) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', response.status, response.statusText);
            }
        } catch (e) { 
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', e.message); 
        }
    },

    async loadRoomState() {
        // –ò–ó–ú–ï–ù–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–Ω–µ–ª–∏
        // –í–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø–∞–Ω–µ–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ JSON
        if (!this.roomId || this.stateReceived) return;
        
        try {
            console.log(`üìÇ loadRoomState: –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${this.roomId}`);
            const resp = await fetch('/api/room-state.php?roomId=' + encodeURIComponent(this.roomId));
            if (resp.ok) {
                let state = null;
                try {
                    state = await resp.json();
                } catch (e) {
                    const text = await resp.text();
                    console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', text);
                    return;
                }
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º playersActions –∏–∑ JSON —Ñ–∞–π–ª–∞
                // playersActions —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª—å—é –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
                console.log(`üö´ loadRoomState: –ù–ï –∑–∞–≥—Ä—É–∂–∞–µ–º playersActions –∏–∑ JSON (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª—å—é)`);

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–ª—è
                if (state.roles) this.roles = state.roles;
                if (state.fouls) this.fouls = state.fouls;
                if (state.techFouls) this.techFouls = state.techFouls;
                if (state.removed) this.removed = state.removed;
                if (state.mainInfoText) this.mainInfoText = state.mainInfoText;
                if (state.additionalInfoText) this.additionalInfoText = state.additionalInfoText;
                if (state.mainInfoVisible !== undefined) this.mainInfoVisible = state.mainInfoVisible;
                if (state.additionalInfoVisible !== undefined) this.additionalInfoVisible = state.additionalInfoVisible;
                if (state.hideSeating !== undefined) this.hideSeating = state.hideSeating;
                if (state.hideLeaveOrder !== undefined) this.hideLeaveOrder = state.hideLeaveOrder;
                if (state.hideRolesStatus !== undefined) this.hideRolesStatus = state.hideRolesStatus;
                if (state.hideBestMove !== undefined) this.hideBestMove = state.hideBestMove;
                if (state.highlightedPlayer !== undefined) this.highlightedPlayer = state.highlightedPlayer;
                if (state.bestMove !== undefined) this.bestMove = state.bestMove;
                if (state.bestMoveSelected !== undefined) this.bestMoveSelected = state.bestMoveSelected;
                if (state.firstKilledPlayer !== undefined) this.firstKilledPlayer = state.firstKilledPlayer;
                if (state.nominations !== undefined) this.nominations = state.nominations;
                if (state.nominationsLocked !== undefined) this.nominationsLocked = state.nominationsLocked;
                if (state.votingOrder !== undefined) this.votingOrder = state.votingOrder;
                if (state.votingCurrentIndex !== undefined) this.votingCurrentIndex = state.votingCurrentIndex;
                if (state.votingResults !== undefined) this.votingResults = state.votingResults;
                if (state.votingVotedPlayers !== undefined) this.votingVotedPlayers = state.votingVotedPlayers;
                if (state.votingFinished !== undefined) this.votingFinished = state.votingFinished;
                if (state.votingWinners !== undefined) this.votingWinners = state.votingWinners;
                if (state.votingStage !== undefined) this.votingStage = state.votingStage;
                if (state.votingTiePlayers !== undefined) this.votingTiePlayers = state.votingTiePlayers;
                if (state.votingLiftResults !== undefined) this.votingLiftResults = state.votingLiftResults;
                if (state.votingHistory !== undefined) this.votingHistory = state.votingHistory;

                if (state.selectedColorScheme !== undefined) {
                    this.selectedColorScheme = state.selectedColorScheme;
                    this.applyColorScheme(this.selectedColorScheme);
                }
                if (state.selectedBackgroundTheme !== undefined) {
                    this.selectedBackgroundTheme = state.selectedBackgroundTheme;
                    this.applyBackgroundTheme(this.selectedBackgroundTheme);
                }
                if (state.winnerTeam !== undefined) this.winnerTeam = state.winnerTeam;
                if (state.currentMode) this.currentMode = state.currentMode;
                if (state.manualMode !== undefined) this.manualMode = state.manualMode;
                if (state.manualGames) this.manualGames = state.manualGames;
                if (state.manualGameSelected !== undefined) this.manualGameSelected = state.manualGameSelected;
                if (state.gameSelected !== undefined) this.gameSelected = state.gameSelected;
                if (state.tableSelected !== undefined) this.tableSelected = state.tableSelected;
                if (state.editRoles !== undefined) this.editRoles = state.editRoles;
                if (state.inputMode) this.inputMode = state.inputMode;
                if (state.avatarsFromServer) this.avatarsFromServer = state.avatarsFromServer;
                if (state.avatarsJustLoaded !== undefined) this.avatarsJustLoaded = state.avatarsJustLoaded;
                
                // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ JSON
                this.stateReceived = true;
                console.log(`‚úÖ loadRoomState: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ–º –∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–∑ JSON`);
                
                // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞
                this.showReturnPlayerModal = false;
                
                this.sendFullState();
            } else {
                const text = await resp.text();
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', text);
            }
        } catch (e) { console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã:', e); }
    },

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–º–Ω–∞—Ç—É —á–µ—Ä–µ–∑ WebSocket
    sendToRoom(data) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify(data));
        }
    },
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sendFullState() {
        // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 100–º—Å
        if (this.sendFullStateTimer) {
            clearTimeout(this.sendFullStateTimer);
        }
        this.sendFullStateTimer = setTimeout(() => {
            this._sendFullStateNow();
        }, 100);
    },
    
    _sendFullStateNow() {
        if (!this.ws || this.ws.readyState !== WebSocket.OPEN) return;
        
        const state = {
            type: "state",
            tableOut: this.tableOut,
            roles: this.roles,
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º playersActions —á–µ—Ä–µ–∑ sendFullState
            // playersActions –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ actionChange —Å–æ–æ–±—â–µ–Ω–∏—è
            fouls: this.fouls,
            techFouls: this.techFouls,
            removed: this.removed,
            highlightedPlayer: this.highlightedPlayer,
            bestMove: this.bestMove,
            bestMoveSelected: this.bestMoveSelected,
            firstKilledPlayer: this.firstKilledPlayer,
            showBestMoveModal: this.showBestMoveModal,
            panelState: {
                mainInfoText: this.mainInfoText,
                additionalInfoText: this.additionalInfoText,
                mainInfoVisible: this.mainInfoVisible,
                additionalInfoVisible: this.additionalInfoVisible,
                hideSeating: this.hideSeating,
                hideLeaveOrder: this.hideLeaveOrder,
                hideRolesStatus: this.hideRolesStatus,
                hideBestMove: this.hideBestMove,
                showRoomNumber: this.showRoomNumber,
                colorScheme: this.selectedColorScheme,
                backgroundTheme: this.selectedBackgroundTheme,
                gameSelected: this.gameSelected,
                tableSelected: this.tableSelected,
                tableNumber: this.tableNumber,
                games: this.games
            },
            winnerTeam: this.winnerTeam,
            avatars: this.avatarsFromServer
        };
        
        this.sendToRoom(state);
    },

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    applyFullState(data) {
        if (data.tableOut !== undefined) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö
            if (Array.isArray(data.tableOut) && data.tableOut.length > 0) {
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤
                data.tableOut.forEach(player => {
                    if (player.roleKey) {
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª–∏
                        if (player.role) {
                            this.$set(this.roles, player.roleKey, player.role);
                        }
                        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                        if (player.action) {
                            this.$set(this.playersActions, player.roleKey, player.action);
                        }
                        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–ª—ã
                        if (player.foul !== undefined) {
                            this.$set(this.fouls, player.roleKey, player.foul);
                        }
                        if (player.techFoul !== undefined) {
                            this.$set(this.techFouls, player.roleKey, player.techFoul);
                        }
                        if (player.removed !== undefined) {
                            this.$set(this.removed, player.roleKey, player.removed);
                        }
                    }
                });
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (data.roles !== undefined) this.roles = data.roles;
        
        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ù–ï –ø—Ä–∏–º–µ–Ω—è–µ–º playersActions –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–∞–Ω–µ–ª–µ–π!
        // –¢–æ–ª—å–∫–æ —ç—Ç–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–û–õ–ù–û–°–¢–¨–Æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ playersActions –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if (data.playersActions !== undefined) {
            console.log(`üö´ applyFullState: –ü–û–õ–ù–û–°–¢–¨–Æ –ò–ì–ù–û–†–ò–†–£–ï–ú playersActions (—Ç–æ–ª—å–∫–æ —ç—Ç–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–∞–º–∏)`);
        }

        if (data.fouls !== undefined) {
            this.fouls = data.fouls || {};
        }
        if (data.techFouls !== undefined) {
            this.techFouls = data.techFouls || {};
        }
        if (data.removed !== undefined) {
            this.removed = data.removed || {};
        }
        if (data.highlightedPlayer !== undefined) this.highlightedPlayer = data.highlightedPlayer;
        if (data.bestMove !== undefined) this.bestMove = data.bestMove;
        if (data.bestMoveSelected !== undefined) this.bestMoveSelected = data.bestMoveSelected;
        if (data.firstKilledPlayer !== undefined) this.firstKilledPlayer = data.firstKilledPlayer;
        if (data.showBestMoveModal !== undefined) this.showBestMoveModal = data.showBestMoveModal;
        if (data.winnerTeam !== undefined) this.winnerTeam = data.winnerTeam;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–Ω–µ–ª–∏
        if (data.panelState !== undefined) {
            if (data.panelState.mainInfoText !== undefined) this.mainInfoText = data.panelState.mainInfoText;
            if (data.panelState.additionalInfoText !== undefined) this.additionalInfoText = data.panelState.additionalInfoText;
            if (data.panelState.mainInfoVisible !== undefined) this.mainInfoVisible = data.panelState.mainInfoVisible;
            if (data.panelState.additionalInfoVisible !== undefined) this.additionalInfoVisible = data.panelState.additionalInfoVisible;
            if (data.panelState.hideSeating !== undefined) this.hideSeating = data.panelState.hideSeating;
            if (data.panelState.hideLeaveOrder !== undefined) this.hideLeaveOrder = data.panelState.hideLeaveOrder;
            if (data.panelState.hideRolesStatus !== undefined) this.hideRolesStatus = data.panelState.hideRolesStatus;
            if (data.panelState.hideBestMove !== undefined) this.hideBestMove = data.panelState.hideBestMove;
            if (data.panelState.showRoomNumber !== undefined) this.showRoomNumber = data.panelState.showRoomNumber;
            if (data.panelState.colorScheme !== undefined) this.selectedColorScheme = data.panelState.colorScheme;
            if (data.panelState.backgroundTheme !== undefined) this.selectedBackgroundTheme = data.panelState.backgroundTheme;
            if (data.panelState.gameSelected !== undefined) this.gameSelected = data.panelState.gameSelected;
            if (data.panelState.tableSelected !== undefined) this.tableSelected = data.panelState.tableSelected;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—ã
        if (data.avatars !== undefined) this.avatarsFromServer = data.avatars;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä—ã –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.$nextTick(() => {
            this.initializeAllTimers();
        });
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞
        this.showReturnPlayerModal = false;
        
        this.$forceUpdate();
    },    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π
    joinRoom() {
        console.log('üöÄ joinRoom: –ú–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–Ω –∏–∑ app-ui-integration.js');
        console.log('üöÄ joinRoom: roomInput =', this.roomInput);
        
        if (!this.roomInput || !this.roomInput.trim()) {
            console.log('‚ùå joinRoom: –ü—É—Å—Ç–æ–π –≤–≤–æ–¥ –∫–æ–º–Ω–∞—Ç—ã');
            if (this.isTelegramApp) {
                this.tg.showAlert('–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã');
            } else {
                alert('–í–≤–µ–¥–∏—Ç–µ ID –∫–æ–º–Ω–∞—Ç—ã');
            }
            return;
        }

        this.roomId = this.roomInput.trim();
        
        // –í–ê–ñ–ù–û: –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ stateReceived –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç—ã
        // —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ JSON
        this.stateReceived = false;
        console.log(`üîÑ joinRoom: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${this.roomId}, —Å–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ stateReceived`);
        
        this.showRoomModal = false;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∫–æ–º–Ω–∞—Ç–µ
        this.saveCurrentSession();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –≤ Telegram
        if (this.isTelegramApp) {
            this.tg.BackButton.show();
            this.showTelegramMainButton();
            this.sendTelegramHapticFeedback();
        }

        this.connectWS();
    },
    
    activateThisPanel() {
        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ç—É –ø–∞–Ω–µ–ª—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({ type: "activatePanel", panelId: this.panelId }));
            console.log('üîß –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–∞–Ω–µ–ª—å:', this.panelId);
        } else {
            console.warn('‚ö†Ô∏è WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –Ω–µ –º–æ–∂–µ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å');
        }
    },

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏ –∏ —Ç–µ–º–∞–º–∏
    setMode(mode) {
        this.currentMode = mode;
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ä–µ–∂–∏–º —Å roles.html —á–µ—Ä–µ–∑ activeInfoTab
        let activeInfoTab = null;
        if (mode === 'day') activeInfoTab = 'day';
        else if (mode === 'night') activeInfoTab = 'night';
        // –î–ª—è —Ä–µ–∂–∏–º–∞ 'roles' –∏–ª–∏ –¥—Ä—É–≥–∏—Ö ‚Äî null
        this.sendToRoom({
            type: "panelStateChange",
            panelState: {
                mainInfoText: this.mainInfoText,
                additionalInfoText: this.additionalInfoText,
                mainInfoVisible: this.mainInfoVisible,
                additionalInfoVisible: this.additionalInfoVisible,
                hideSeating: this.hideSeating,
                hideLeaveOrder: this.hideLeaveOrder,
                hideRolesStatus: this.hideRolesStatus,
                hideBestMove: this.hideBestMove,
                showRoomNumber: this.showRoomNumber,
                colorScheme: this.selectedColorScheme,
                backgroundTheme: this.selectedBackgroundTheme,
                activeInfoTab: activeInfoTab
            }
        });
        this.sendFullState();
    },

    applyColorScheme(schemeKey) {
        const scheme = this.colorSchemes.find(s => s.key === schemeKey) || this.colorSchemes[0];
        document.documentElement.style.setProperty('--maf-accent-color', scheme.accent);
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ —Ñ–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è panel.html)
        const gradients = {
            'purple': 'linear-gradient(135deg, #1a1625 0%, #2d1b47 25%, #1f1a3a 50%, #2a1f45 75%, #1a1625 100%)',
            'blue': 'linear-gradient(135deg, #0e1a2e 0%, #1b2844 25%, #142235 50%, #1f2d47 75%, #0e1a2e 100%)',
            'green': 'linear-gradient(135deg, #0b1f14 0%, #183326 25%, #13251e 50%, #1d382b 75%, #0b1f14 100%)',
            'red': 'linear-gradient(135deg, #2b1017 0%, #4a1e28 25%, #381a21 50%, #4a2631 75%, #2b1017 100%)',
            'orange': 'linear-gradient(135deg, #2a1a0e 0%, #453218 25%, #3a2816 50%, #453a1f 75%, #2a1a0e 100%)',
            'pink': 'linear-gradient(135deg, #2b1224 0%, #4a1f41 25%, #381d34 50%, #4a2746 75%, #2b1224 100%)',
            'yellow': 'linear-gradient(135deg, #29240e 0%, #443f18 25%, #393416 50%, #44431f 75%, #29240e 100%)',
            'teal': 'linear-gradient(135deg, #0e2925 0%, #194440 25%, #163934 50%, #1f4446 75%, #0e2925 100%)',
            'gold': 'linear-gradient(135deg, #291e09 0%, #443a14 25%, #393111 50%, #443f1b 75%, #291e09 100%)',
            'silver': 'linear-gradient(135deg, #1b1d1f 0%, #34393e 25%, #292d31 50%, #393f44 75%, #1b1d1f 100%)',
            'aqua': 'linear-gradient(135deg, #092329 0%, #143f49 25%, #113439 50%, #1b444f 75%, #092329 100%)',
            'lime': 'linear-gradient(135deg, #19290e 0%, #2f4418 25%, #24391b 50%, #33441f 75%, #19290e 100%)',
            'violet': 'linear-gradient(135deg, #1e1324 0%, #342441 25%, #291d34 50%, #392746 75%, #1e1324 100%)',
            'brown': 'linear-gradient(135deg, #1e130f 0%, #39271f 25%, #2e2019 50%, #3f2f24 75%, #1e130f 100%)',
            'black': 'linear-gradient(135deg, #090909 0%, #191919 25%, #141414 50%, #1f1f1f 75%, #090909 100%)',
            'mint': 'linear-gradient(135deg, #0e2919 0%, #19442f 25%, #143729 50%, #1f443f 75%, #0e2919 100%)',
            'peach': 'linear-gradient(135deg, #291714 0%, #492f29 25%, #37251f 50%, #493731 75%, #291714 100%)',
            'sky': 'linear-gradient(135deg, #111f29 0%, #243746 25%, #192e39 50%, #243f4f 75%, #111f29 100%)',
            'rose': 'linear-gradient(135deg, #290e19 0%, #491e34 25%, #371624 50%, #49243f 75%, #290e19 100%)',
            'olive': 'linear-gradient(135deg, #19190e 0%, #322f18 25%, #272716 50%, #34341f 75%, #19190e 100%)',
            'navy': 'linear-gradient(135deg, #090e19 0%, #141f29 25%, #0f1721 50%, #19242f 75%, #090e19 100%)',
            'coral': 'linear-gradient(135deg, #29150e 0%, #492c18 25%, #372316 50%, #49341f 75%, #29150e 100%)',
            'sand': 'linear-gradient(135deg, #292319 0%, #443f39 25%, #39342f 50%, #444439 75%, #292319 100%)',
            'plum': 'linear-gradient(135deg, #1e1119 0%, #341f29 25%, #291921 50%, #39242f 75%, #1e1119 100%)',
            'ice': 'linear-gradient(135deg, #142229 0%, #243f46 25%, #193439 50%, #24444f 75%, #142229 100%)',
            'fire': 'linear-gradient(135deg, #290e09 0%, #491e14 25%, #371611 50%, #49241b 75%, #290e09 100%)',
            'forest': 'linear-gradient(135deg, #09190e 0%, #142918 25%, #112116 50%, #192f1f 75%, #09190e 100%)',
            'steel': 'linear-gradient(135deg, #14171f 0%, #242c34 25%, #1e2429 50%, #29343f 75%, #14171f 100%)',
            'ruby': 'linear-gradient(135deg, #290914 0%, #491424 25%, #37111e 50%, #49192f 75%, #290914 100%)',
            'amber': 'linear-gradient(135deg, #291e09 0%, #443414 25%, #392c11 50%, #443f1b 75%, #291e09 100%)'
        };
        
        const gradient = gradients[schemeKey] || gradients['purple'];
        document.documentElement.style.setProperty('--maf-gradient-bg', gradient);
        
        let rgb = scheme.accent;
        if (rgb.startsWith('#')) {
            let hex = rgb.replace('#', '');
            if (hex.length === 3) hex = hex.split('').map(x => x + x).join('');
            const r = parseInt(hex.substring(0, 2), 16);
            const g = parseInt(hex.substring(2, 4), 16);
            const b = parseInt(hex.substring(4, 6), 16);
            rgb = `${r},${g},${b}`;
            
            const brightness = (r * 299 + g * 587 + b * 114) / 1000;
            if (brightness > 180) {
                document.body.setAttribute('data-accent-light', 'true');
                document.documentElement.style.setProperty('--maf-role-badge-text', '#222');
            } else {
                document.body.removeAttribute('data-accent-light');
                document.documentElement.style.setProperty('--maf-role-badge-text', '#fff');
            }
        }
        
        document.documentElement.style.setProperty('--maf-accent-color-rgb', rgb);
        document.documentElement.style.setProperty('--maf-panel-glow', `0 0 18px 4px rgba(${rgb},0.27), 0 0 1px 0px #31225c, 0 2px 8px #0003`);
    },

    applyBackgroundTheme(themeKey) {
        const theme = this.backgroundThemes.find(t => t.key === themeKey) || this.backgroundThemes[0];
        if (theme) {
            document.documentElement.style.setProperty('--maf-bg-main', theme.bgMain);
            document.documentElement.style.setProperty('--maf-bg-secondary', theme.bgSecondary);
            document.documentElement.style.setProperty('--maf-bg-accent', theme.bgAccent);
        }
    },

    applyColorSchemeAndSave(schemeKey) {
        this.selectedColorScheme = schemeKey;
        this.applyColorScheme(schemeKey);
        this.saveRoomStateIncremental({ selectedColorScheme: schemeKey });
        this.sendToRoom({
            type: "panelStateChange",
            panelState: {
                mainInfoText: this.mainInfoText,
                additionalInfoText: this.additionalInfoText,
                mainInfoVisible: this.mainInfoVisible,
                additionalInfoVisible: this.additionalInfoVisible,
                hideSeating: this.hideSeating,
                hideLeaveOrder: this.hideLeaveOrder,
                hideRolesStatus: this.hideRolesStatus,
                hideBestMove: this.hideBestMove,
                showRoomNumber: this.showRoomNumber,
                colorScheme: schemeKey,
                backgroundTheme: this.selectedBackgroundTheme,
                gameSelected: this.gameSelected,
                tableSelected: this.tableSelected
            }
        });
        this.sendFullState();
        this.saveCurrentSession();
    },

    applyBackgroundThemeAndSave(themeKey) {
        this.selectedBackgroundTheme = themeKey;
        this.applyBackgroundTheme(themeKey);
        this.saveRoomStateIncremental({ selectedBackgroundTheme: themeKey });
        this.sendToRoom({
            type: "panelStateChange",
            panelState: {
                mainInfoText: this.mainInfoText,
                additionalInfoText: this.additionalInfoText,
                mainInfoVisible: this.mainInfoVisible,
                additionalInfoVisible: this.additionalInfoVisible,
                hideSeating: this.hideSeating,
                hideLeaveOrder: this.hideLeaveOrder,
                hideRolesStatus: this.hideRolesStatus,
                hideBestMove: this.hideBestMove,
                showRoomNumber: this.showRoomNumber,
                colorScheme: this.selectedColorScheme,
                backgroundTheme: themeKey,
                gameSelected: this.gameSelected,
                tableSelected: this.tableSelected
            }
        });
        this.sendFullState();
        this.saveCurrentSession();
    },

    // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    removeFocus(event) {
        // –£–±–∏—Ä–∞–µ—Ç —Ñ–æ–∫—É—Å —Å —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ª–∏–ø–∞–Ω–∏—è hover-—ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        if (event.target) {
            event.target.blur();
        }
    },

    toggleHighlight(roleKey, event) {
        if (this.highlightedPlayer === roleKey) {
            this.highlightedPlayer = null;
        } else {
            this.highlightedPlayer = roleKey;
        }
        this.setHighlightedPlayer(this.highlightedPlayer);
    },

    clearPlayerStatus(roleKey) {
        this.resetPlayerStatus(roleKey, false);
    },

    setWinnerTeam(team) {
        this.winnerTeam = team;
        this.saveRoomStateIncremental({ winnerTeam: team });
        this.sendToRoom({ type: "winnerTeamChange", winnerTeam: team });
        this.sendFullState();
    },

    resetBestMove() {
        this.firstKilledPlayer = null;
        this.bestMove = [];
        this.bestMoveSelected = false;
        this.showBestMoveModal = false;
        this.saveRoomStateIncremental({
            firstKilledPlayer: null,
            bestMove: [],
            bestMoveSelected: false,
            showBestMoveModal: false
        });
        this.sendFullState();
    },

    avatarExHas(roleKey) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –¥–ª—è –∏–≥—Ä–æ–∫–∞
        return this.playersAvatarEx && this.playersAvatarEx.has(roleKey);
    },

    resetAllState() {
        this.manualMode = false;
        this.manualGames = [];
        this.manualGameSelected = 1;
        this.tournamentId = '';
        this.inputMode = 'gomafia';
        this.stateReceived = false;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã 'voted' –∏ 'killed' –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –≤—Å–µ–π –∫–∞—Ä—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π
        if (this.playersActions && Object.keys(this.playersActions).length) {
            const allEntries = Object.entries(this.playersActions);
            const criticalEntries = allEntries.filter(([_, v]) => v === 'voted' || v === 'killed');
            const removedEntries = allEntries.filter(([_, v]) => v !== 'voted' && v !== 'killed');
            
            const newPlayersActions = {};
            criticalEntries.forEach(([key, value]) => {
                newPlayersActions[key] = value;
            });
            this.playersActions = newPlayersActions;
            console.log(`üîÑ resetAllState: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è ${criticalEntries.length} –∏–≥—Ä–æ–∫–æ–≤`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—à–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
            removedEntries.forEach(([roleKey, _]) => {
                this.sendToRoom({ type: "actionChange", roleKey, action: null });
            });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–±–∏—Ç—ã–µ –∏–≥—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
            const killedPlayers = criticalEntries.filter(([_, v]) => v === 'killed');
            if (killedPlayers.length === 0) {
                // –ï—Å–ª–∏ —É–±–∏—Ç—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª—É—á—à–∏–π —Ö–æ–¥
                this.resetBestMove();
            } else {
                // –ï—Å–ª–∏ —É–±–∏—Ç—ã–µ –∏–≥—Ä–æ–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å, –Ω–æ firstKilledPlayer –Ω–µ —Å—Ä–µ–¥–∏ –Ω–∏—Ö, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
                const killedKeys = killedPlayers.map(([key, _]) => key);
                if (this.firstKilledPlayer && !killedKeys.includes(this.firstKilledPlayer)) {
                    this.resetBestMove();
                }
            }
        } else {
            this.playersActions = {};
            this.resetBestMove();
        }
          this.highlightedPlayer = null;
        this.userEditedAdditionalInfo = false;
        this.sendFullState();
    },

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    onGameSelectChange(event) {
        const selectedValue = event.target.value;
        console.log('üéÆ –í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞:', selectedValue);
        
        if (this.manualMode) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            this.onManualGameSelect(event);
        } else {
            const selectedGame = Number(selectedValue);
            this.gameSelected = selectedGame;
            // –ü—Ä–∏ —Å–º–µ–Ω–µ –∏–≥—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª
            this.updateTableSelection();
        }
    },

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç–æ–ª–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏–≥—Ä—ã
    updateTableSelection() {
        if (!this.gameSelectedObject || this.gameSelectedObject.length === 0) {
            this.tableSelected = undefined;
            return;
        }
        
        // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ç–æ–ª
        this.tableSelected = Number(this.gameSelectedObject[0].tableNum);
        console.log('ü™ë –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª:', this.tableSelected);
    },

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    updateInfoText() {
        if (this.manualMode) {
            return; // –í —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        }

        if (!this.tournament || !this.tournament.props?.pageProps?.serverData?.games) {
            return;
        }

        const games = this.tournament.props.pageProps.serverData.games;
        const currentGameData = games.find(g => g.gameNum === this.gameSelected);
        
        if (!currentGameData) {
            return;
        }

        let tableCount = currentGameData.game?.length || 1;
        let gameCount = games.length || 1;
        let currentGame = this.gameSelected || 1;
        let tableNum = this.tableSelected || 1;
        let additional = "";
        
        if (tableCount > 1) {
            additional += `–ù–æ–º–µ—Ä —Å—Ç–æ–ª–∞: ${tableNum} | `;
        }
        additional += `–ò–≥—Ä–∞ ${currentGame} –∏–∑ ${gameCount}`;
        
        this.additionalInfoText = additional;
        console.log('üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω:', additional);
    }
});

// –ó–∞–∫—Ä—ã–≤–∞–µ–º Vue –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º computed —Å–≤–æ–π—Å—Ç–≤–∞ –∏ watcher'—ã
Object.assign(window.app, {
    computed: {
        // –î–æ–±–∞–≤–ª—è–µ–º computed —Å–≤–æ–π—Å—Ç–≤–∞ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        buildId() {
            return this.tournament?.buildId;
        },
          tableOut() {
            const out = this.manualMode 
                ? this.manualPlayers 
                : this.tournament?.props?.pageProps?.serverData?.games
                    ?.find(g => g.gameNum === this.gameSelected)?.game
                    ?.find(t => t.tableNum === this.tableSelected)?.table
                    ?.map((p, i) => ({ ...p, num: i + 1, roleKey: `${this.gameSelected}-${this.tableSelected}-${i + 1}` }))
                    ?.filter(Boolean) || [];

            // –î–æ–±–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            const result = out.map((p, i) => {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
                if (!p || !p.roleKey) {
                    console.warn('–ò–≥—Ä–æ–∫ –±–µ–∑ roleKey:', p, '–∏–Ω–¥–µ–∫—Å:', i);
                    return null;
                }
                
                const roleKey = p.roleKey;
                
                // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞ (–∫–∞–∫ –≤ oldapp.js)
                const pd = this.playersData.get(p.login);
                const pdo = this.playersDataOnline.get(p.login);
                let avatarCss = '';
                let avatarLink = this.playersAvatarEx.get(this.gameSelected + '-' + p.id) || pdo?.avatar_link || pd?.avatar || this.avatarsFromServer?.[p.login];
                if (avatarLink) {
                    avatarCss = `url("${avatarLink}")`;
                }
                
                const playerData = {
                    ...p,
                    avatarCss,
                    avatar_link: avatarLink,
                    foul: (this.fouls && typeof this.fouls[roleKey] !== 'undefined') ? this.fouls[roleKey] : 0,
                    techFoul: (this.techFouls && typeof this.techFouls[roleKey] !== 'undefined') ? this.techFouls[roleKey] : 0,
                    removed: !!(this.removed && this.removed[roleKey]),
                };
                
                return playerData;
            }).filter(Boolean); // –£–±–∏—Ä–∞–µ–º null –∑–Ω–∞—á–µ–Ω–∏—è            
            return result;
        },
        
        shouldShowFinishButton() {
            if (!this.votingFinished) return false;
            
            // Main –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            if (this.votingStage === 'main' && this.votingWinners && this.votingWinners.length > 0) {
                const alivePlayers = this.tableOut
                    .map((p, idx) => ({ num: idx + 1, roleKey: p.roleKey }))
                    .filter(p => this.isPlayerActive(p.roleKey))
                    .map(p => p.num);
                const votedNumbers = [].concat(...Object.values(this.votingResults)).filter((v, i, arr) => arr.indexOf(v) === i);
                return votedNumbers.length >= alivePlayers.length;
            }
            
            // Tie –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            if (this.votingStage === 'tie' && this.votingWinners && this.votingWinners.length > 0) {
                const alivePlayers = this.tableOut
                    .map((p, idx) => ({ num: idx + 1, roleKey: p.roleKey }))
                    .filter(p => this.isPlayerActive(p.roleKey))
                    .map(p => p.num);
                const votedNumbers = [].concat(...Object.values(this.votingResults)).filter((v, i, arr) => arr.indexOf(v) === i);
                return votedNumbers.length >= alivePlayers.length;
            }
              // Lift –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ: –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            if (this.votingStage === 'lift') {
                return true;
            }            return false;
        }
    },watch: {        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        gameSelected(newGameNum, oldGameNum) {
            if (newGameNum !== oldGameNum && newGameNum !== undefined) {
                console.log('üîÑ –ò–≥—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ —Å', oldGameNum, '–Ω–∞', newGameNum);
                  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Å—Ç–æ–ª–∞
                this.updateTableSelection();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                this.updateInfoText();
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                this.saveCurrentSession();
            }
        },

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–∞
        tableSelected(newTableNum, oldTableNum) {
            if (newTableNum !== oldTableNum && newTableNum !== undefined) {                console.log('ü™ë –°—Ç–æ–ª –∏–∑–º–µ–Ω—ë–Ω —Å', oldTableNum, '–Ω–∞', newTableNum);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                this.updateInfoText();
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                this.saveCurrentSession();
            }
        },

        // –°–ª–µ–¥–∏–º –∑–∞ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥ –≤ Telegram
        showRoomModal(newVal) {
            if (this.isTelegramApp && this.tg) {
                if (newVal) {
                    this.tg.BackButton.hide();
                    this.hideTelegramMainButton();
                } else {
                    this.tg.BackButton.show();
                    this.showTelegramMainButton();
                }
            }
        },
        showModal(newVal) {
            if (this.isTelegramApp && this.tg) {
                if (newVal) {
                    this.tg.BackButton.show();
                } else if (!this.showRoomModal) {
                    this.tg.BackButton.show();
                }
            }        },
        showBestMoveModal(newVal) {
            if (this.isTelegramApp && this.tg && newVal) {
                this.tg.BackButton.show();
            }
        },
        showSettingsModal(newVal) {
            if (this.isTelegramApp && this.tg && newVal) {
                this.tg.BackButton.show();
            }
        },
        showThemeModal(newVal) {
            if (this.isTelegramApp && this.tg && newVal) {
                this.tg.BackButton.show();
            }
        },
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ë–õ–û–ö–ò–†–û–í–ö–ê –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞
        showReturnPlayerModal(newVal) {
            if (newVal === true) {
                console.log('üö´ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
                this.$nextTick(() => {
                    this.showReturnPlayerModal = false;
                });
            }
        }
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º computed —Å–≤–æ–π—Å—Ç–≤–∞ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
window.app = window.app || {};
if (!window.app.computed) window.app.computed = {};

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º computed —Å–≤–æ–π—Å—Ç–≤–∞
Object.assign(window.app.computed, {
    buildId() {
        return this.tournament?.buildId;
    },
    
    gameSelectedObject() {
        // –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ —Å—Ç–æ–ª–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
        if (!this.tournament || this.manualMode) {
            return [];
        }
        
        const games = this.tournament?.props?.pageProps?.serverData?.games;
        if (!games || !this.gameSelected) {
            return [];
        }
        
        const selectedGame = games.find(g => g.gameNum === this.gameSelected);
        return selectedGame?.game || [];
    },
    
    games() {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–≥—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
        if (this.manualMode) {
            return this.manualGames || [];
        }
        
        return this.tournament?.props?.pageProps?.serverData?.games || [];
    },
      tableOut() {
        const out = this.manualMode 
            ? this.manualPlayers 
            : this.tournament?.props?.pageProps?.serverData?.games
                ?.find(g => g.gameNum === this.gameSelected)?.game
                ?.find(t => t.tableNum === this.tableSelected)?.table
                ?.map((p, i) => ({ ...p, num: i + 1, roleKey: `${this.gameSelected}-${this.tableSelected}-${i + 1}` }))
                ?.filter(Boolean) || [];

        // –î–æ–±–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        const result = out.map((p, i) => {
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞
            if (!p || !p.roleKey) {
                return null;
            }
            
            const roleKey = p.roleKey;
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–≤–∞—Ç–∞—Ä –∏–≥—Ä–æ–∫–∞ (–∫–∞–∫ –≤ oldapp.js)
            const pd = this.playersData.get(p.login);
            const pdo = this.playersDataOnline.get(p.login);
            let avatarCss = '';
            let avatarLink = this.playersAvatarEx.get(this.gameSelected + '-' + p.id) || pdo?.avatar_link || pd?.avatar || this.avatarsFromServer?.[p.login];
            if (avatarLink) {
                avatarCss = `url("${avatarLink}")`;
            }
            
            return {
                ...p,
                num: i + 1,
                roleKey: p.roleKey,
                avatarCss,
                avatar_link: avatarLink,
                role: this.roles[p.roleKey] || null,
                action: this.playersActions[p.roleKey] || null,
                fouls: this.fouls[p.roleKey] || 0,
                techFouls: this.techFouls[p.roleKey] || 0,
                removed: this.removed[p.roleKey] || false,
                isFirstKilled: p.roleKey === this.firstKilledPlayer,
                isHighlighted: p.roleKey === this.highlightedPlayer
            };
        }).filter(Boolean);
        
        return result;
    },
    tournamentName() {
        return this.tournament?.props?.pageProps?.serverData?.name || '';
    },
    
    manualPlayers() {
        const game = this.manualGames.find(g => g.num === this.manualGameSelected);
        return game?.players || [];
    },
    
    firstGamePlayers() {
        const game = this.manualGames.find(g => g.num === 1);        return game?.players || [];
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–Ω–µ–ª–∏
    panelStateChanged() {
        try {
            const panelState = {
                mainInfoVisible: this.mainInfoVisible,                additionalInfoVisible: this.additionalInfoVisible,
                hideSeating: this.hideSeating,
                hideLeaveOrder: this.hideLeaveOrder,
                hideRolesStatus: this.hideRolesStatus,
                hideBestMove: this.hideBestMove,
                showRoomNumber: this.showRoomNumber
            };
            
            localStorage.setItem('maf-panel-settings', JSON.stringify(panelState));
            console.log('üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', panelState);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–∞–Ω–µ–ª–∏:', error);
        }
    }
});

console.log('‚úÖ app-ui-integration.js –∑–∞–≥—Ä—É–∂–µ–Ω, –º–µ—Ç–æ–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ window.app.methods');
console.log('üîß joinRoom –º–µ—Ç–æ–¥:', typeof window.app.methods.joinRoom);
console.log('üîß computed —Å–≤–æ–π—Å—Ç–≤–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã:', Object.keys(window.app.computed));

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ Vue —ç–∫–∑–µ–º–ø–ª—è—Ä–µ
if (window.app && window.app.$options) {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º joinRoom –≤ Vue —ç–∫–∑–µ–º–ø–ª—è—Ä–µ...');
    window.app.joinRoom = window.app.methods.joinRoom.bind(window.app);
    console.log('‚úÖ joinRoom –æ–±–Ω–æ–≤–ª—ë–Ω –≤ Vue —ç–∫–∑–µ–º–ø–ª—è—Ä–µ:', typeof window.app.joinRoom);
}
